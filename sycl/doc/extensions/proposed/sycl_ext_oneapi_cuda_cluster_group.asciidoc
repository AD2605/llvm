= sycl_ext_oneapi_cuda_cluster_group

:source-highlighter: coderay 
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]
:endnote: &#8212;{nbsp}end{nbsp}note

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks] 

Copyright (C) 2024-2024 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks of
The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

Other company and product names may be trademarks of the respective companies
with which they are associated and can be claimed as the property of others.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 8 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision. 

This extensions also depends on the following other sycl extensions: 

* link:../experimental/sycl_ext_oneapi_enqueue_functions.asciidoc[
          sycl_ext_oneapi_enqueue_functions]
* link:../experimental/sycl/sycl_ext_oneapi_properties.asciidoc[
    sycl_ext_oneapi_properties
]


== Status

This is an experimental extension specification for the `ext_oneapi_cuda`
backend, intended to provide early access to features and gather community
feedback.  
Interfaces defined in this specification are implemented in {dpcpp}, but they
are not finalized and may change incompatibly in future versions of {dpcpp}
without prior notice. *Shipping software products should not rely on APIs
defined in this specification.*

=== Backend support status 

This extension is only supported by the `ext_oneapi_cuda` backend.


== Glossary

* Compute Capability: Abbreviated as "cc", a number assigned to each generation
of NVIDIA's GPUs conveying the feature set associated with that number.



== Overview

NVIDIAâ€™s compute capability (cc) 9.0 devices introduced a new level in the
thread hierarchy, called as thread block clusters, in CUDA terminology. A thread
block cluster, is a collection of thread blocks (a work-group in SYCL
terminology). The work-groups which make up a cluster have the ability to access
each other's local memory, and can be synchronized. This has various
applications, convolutions, GEMMs and FFTs to name a few.

This proposal introduces a SYCL API to expose this capability, to be called as
`cluster_group`, and adds the methods to launch a kernel with a cluster range
and accessing the various id's associated with the cluster
launch in device code.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_CUDA_CLUSTER_GROUP` to one of the values defined in the
table below.  Applications can test for the existence of this macro to determine
if the implementation supports this feature, or applications can test the
macro's value to determine which of the extension's features the implementation
supports

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not version-ed, so the
 feature-test macro always has this value.
|===


=== Launching a kernel with a `cluster_group`

Because of the special scheduling guarantees associated with a cluster launch,
the backend must know which kernel would be using this feature. Thus, this 
proposal introduces a new launch property called as `cluster_size` that will
contain the cluster  in terms of number of workgroups.
 

[source,c++]
----
namespace sycl::ext::oneapi::experimental::cuda {
/**
* Dim Dimensionality of the launch
* size sycl::range specifying the number of workgroups in the cluster
  in each dimension.
*/
template <int Dim>
struct cluster_size {
  cluster_size(const sycl::range<Dim>& size) : 
    size(size) {}
  size_t operator[](int i) { return size[i]; }
  sycl::range<Dim> size;
};
using cluster_size_key = cluster_size;
} // namespace sycl::ext::oneapi::experimental::cuda
----

The property list can the be constructed as follows - 

[source,c++]
----
properties  cluster_launch_property{cluster_size({1, 2, 1})};
----

Note that the total number of work-groups in the kernel must be a multiple of
the cluster range in each dimension.

The launch functions introduced in `sycl_ext_oneapi_enqueue_functions` can then
be used to launch the kernel with the mentioned property.


=== Accessing the Cluster Group From Device Code

Building upon the group hierarchy in sycl, this proposal adds another level
above `group`(for work-groups), to be called as `cluster-group`, which 
represents a collection of work-groups and will be accessible via the `nd_item`
class, via a method to be introduced called `ext_oneapi_cuda_get_cluster_group()`.


[%header,cols="10,5"]
|===

|`cluster_group<Dimensions> nd_item::ext_oneapi_cuda_get_cluster_group()`
|Returns the constituent `cluster_group` in the kernel, representing this
`cluster_group`'s overall position in the `nd_range`
|===


The `cluster_group` class will contain the following member functions, to access
the various ids of the work-item and work-groups.

[source,c++]
----
    class cluster_group {
    public:
        using id_type = id<3>;
        using range_type = range<3>;
        using linear_id_type = size_t;

        linear_id_type get_group_linear_id() const;

        linear_id_type get_local_linear_id() const;

        range_type get_cluster_group_range() const;

        id_type get_group_id() const;
    }
----


[%header,cols="5,5"]
|===
|Method
|Description

|`linear_id get_group_linear_id() const`
|Returns the flattened id of the calling `group` within the cluster

|`linear_id get_local_linear_id() const`
|Returns the flattened index of the calling work-item within the cluster

|`range_type get_cluster_group_range() const`
|Returns the number of work-groups in each dimension

|`id_type get_group_id() const`
|Returns the id of the calling work-group along each dimension
|===


To obtain the total number of clusters in the kernel, and to obtain the 
id of the cluster of the calling work-item, this extension proposes to add two
new member functions the `nd_item` class, namely 
`ext_oneapi_cuda_get_size` and `ext_oneapi_cuda_get_cluster_id`


[%header,cols="10,5"]
|===

|`range<3> nd_item::ext_oneapi_cuda_get_size(size_t) const`
|Returns the total number of `cluster_groups` across each dimension.

|`id<3> nd_item::get_cluster_id() const`
|Returns the id of the cluster along each dimension.
|===


== Accessing another work-group's local memory

Work-group's within the cluster have the ability to access another work-group's 
local memory. Typically addresses which reside in the local memory of a 
work-group can only be addressed by the work-items of that work-group. 
Therefore, to access another work-group's local memory, the address needs to be
mapped such that the address in another work-group is addressable within the 
calling work-item. Further, to access another another work-group's local memory,
all the work-groups within the cluster must exist and the work-group's should
not cease to exist before all the memory operations are completed. This can be 
ensured by synchronizing all the work-items within the cluster before and after
the local memory operations, using `group_barrier`.

A member function of the `cluster_group` class; 
`map_cluster_local_pointer` will perform the mapping and return a pointer 
which can then be dereferenced by the calling work-item. 


[%header,cols="10,5"]
|===

|T*  map_cluster_local_pointer(T* addr, size_t group_id)
|Accepts the equivalent address to the memory location relative to the calling 
work-item which is to be mapped from the local memory of the work-group, as 
specified by the group_id, denoting the linear group_id within the cluster
|===


== Cluster Memory Fence Scope and Barrier

Work-items in a work-group can atomically operate on the local memory addresses
of another work-group which have mapped as described above. To facilitate this,
this proposal introduces a new memory scope, 
`sycl_ext_oneapi_experimental_cuda_cluster_fence` which can be used with the
existing `atomic_ref` class.

[source,c++]
----
    class cluster_group {
    public:
    ...
    static constexpr memory_scope fence_scope = 
                memory_scope::sycl_ext_oneapi_experimental_cuda_cluster_fence;
    }
----


To synchronize all workitems in the cluster group, `sycl::group_barrier` can be 
used, accepting the `cluster_group` class.


== Example

This section adds a representative example of how to launch a kernel with 
the cluster-range specified and accessing various id's within the kernel - 

[source,c++]
----
void kernel_function_foo(nd_item<3> it) {
    using namespace sycl::
    auto cg = it.ext_oneapi_cuda_get_cluster_group();
    auto wg_ids_in_cluster = cg.get_group_id();
    ...
}

sycl::event launch_kernel_with_cluster() {
    using namespace sycl::ext::oneapi::experimental;
    using namespace sycl::ext::oneapi::experimental::cuda;

    sycl::nd_range<3> kernel_range({4096, 4096, 32}, {32, 32, 1});
    properties ClusterProperties(cluster_size({4, 4, 1}));
    sycl::queue queue;
    launch_config config(kernel_range, ClusterProperties);
    return submit_with_event(queue, [&](sycl::handler& cgh){
        nd_launch(cgh, config, kernel_function_foo);
    })
}

----


== Known Issues
This Specification does not mention the forward progress guarantees of the 
cluster_group.


== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Authors|Changes
|1|2024-04-29|Atharva Dubey|*Initial public working draft*
|========================================